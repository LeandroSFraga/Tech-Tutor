const ARVORE_AVL_CONCEPT = [
  `üå≥üîÉ As √°rvores AVL s√£o estruturas de dados balanceadas projetadas para manter o equil√≠brio da altura da √°rvore. Elas s√£o chamadas de "AVL" em homenagem aos seus inventores, Adelson-Velsky e Landis.

As √°rvores AVL t√™m as seguintes caracter√≠sticas principais:

- Fator de balanceamento: Cada n√≥ em uma √°rvore AVL possui um fator de balanceamento, que √© a diferen√ßa entre a altura da sub√°rvore direita e a altura da sub√°rvore esquerda desse n√≥. O fator de balanceamento pode ser -1, 0 ou 1.

- Balanceamento autom√°tico: Ap√≥s cada opera√ß√£o de inser√ß√£o ou remo√ß√£o, as √°rvores AVL realizam rota√ß√µes e reorganiza√ß√µes de n√≥s para manter o fator de balanceamento de todos os n√≥s em conformidade. Essas rota√ß√µes ajudam a manter a √°rvore equilibrada e evitam que a altura se torne excessivamente grande.

- Altura balanceada: Nas √°rvores AVL, a diferen√ßa de altura entre as sub√°rvores esquerda e direita de qualquer n√≥ √© no m√°ximo 1. Isso garante que a altura da √°rvore seja proporcional ao logaritmo do n√∫mero de n√≥s, o que resulta em um desempenho eficiente para opera√ß√µes de busca, inser√ß√£o e remo√ß√£o.

- Rota√ß√µes: As rota√ß√µes s√£o opera√ß√µes fundamentais nas √°rvores AVL para reequilibrar a √°rvore. Elas podem ser rota√ß√µes simples (√† esquerda ou √† direita) ou rota√ß√µes duplas, dependendo do fator de balanceamento dos n√≥s envolvidos. As rota√ß√µes mant√™m o equil√≠brio e a ordem das chaves na √°rvore.

As √°rvores AVL s√£o amplamente utilizadas em aplica√ß√µes onde √© necess√°rio garantir tempos de acesso eficientes e evitar o pior caso de desempenho. Elas s√£o especialmente √∫teis em bancos de dados, sistemas de busca e outras situa√ß√µes em que a efici√™ncia na busca e manipula√ß√£o de dados √© essencial.`,
];
const ARVORE_AVL_EXAMPLE = [
  `Imagine um sistema de classifica√ß√£o de jogos de videogame, onde os jogos s√£o organizados em uma √°rvore AVL com base na sua popularidade. Cada jogo tem um nome e uma pontua√ß√£o de popularidade associada. O objetivo √© manter a √°rvore balanceada para garantir uma busca eficiente dos jogos mais populares.` +
    '\n```java\n' +
    `class Jogo {
        String nome;
        int popularidade;
    
        public Jogo(String nome, int popularidade) {
            this.nome = nome;
            this.popularidade = popularidade;
        }
    }
    
    class NoAVL {
        Jogo jogo;
        NoAVL esquerda;
        NoAVL direita;
        int altura;
    
        public NoAVL(Jogo jogo) {
            this.jogo = jogo;
            esquerda = null;
            direita = null;
            altura = 1;
        }
    }
    
    class ArvoreAVL {
        NoAVL raiz;
    
        public ArvoreAVL() {
            raiz = null;
        }
    
        // Obt√©m a altura de um n√≥ (retorna 0 para n√≥ nulo)
        int altura(NoAVL no) {
            if (no == null)
                return 0;
            return no.altura;
        }
    
        // Obt√©m o fator de balanceamento de um n√≥
        int fatorBalanceamento(NoAVL no) {
            if (no == null)
                return 0;
            return altura(no.esquerda) - altura(no.direita);
        }
    
        // Atualiza a altura de um n√≥
        void atualizarAltura(NoAVL no) {
            if (no != null)
                no.altura = 1 + Math.max(altura(no.esquerda), altura(no.direita));
        }
    
        // Realiza a rota√ß√£o simples √† esquerda
        NoAVL rotacaoEsquerda(NoAVL no) {
            NoAVL novaRaiz = no.direita;
            NoAVL temp = novaRaiz.esquerda;
            novaRaiz.esquerda = no;
            no.direita = temp;
            atualizarAltura(no);
            atualizarAltura(novaRaiz);
            return novaRaiz;
        }
    
        // Realiza a rota√ß√£o simples √† direita
        NoAVL rotacaoDireita(NoAVL no) {
            NoAVL novaRaiz = no.esquerda;
            NoAVL temp = novaRaiz.direita;
            novaRaiz.direita = no;
            no.esquerda = temp;
            atualizarAltura(no);
            atualizarAltura(novaRaiz);
            return novaRaiz;
        }
    
        // Insere um jogo na √°rvore AVL
        NoAVL inserir(NoAVL no, Jogo jogo) {
            if (no == null)
                return new NoAVL(jogo);
    
            if (jogo.popularidade < no.jogo.popularidade)
                no.esquerda = inserir(no.esquerda, jogo);
            else if (jogo.popularidade > no.jogo.popularidade)
                no.direita = inserir(no.direita, jogo);
            else
                return no; // Jogo j√° existe
    
            atualizarAltura(no);
    
            int fator = fatorBalanceamento(no);
    
            // Realiza as rota√ß√µes para balancear a √°rvore
            if (fator > 1 && jogo.popularidade < no.esquerda.jogo.popularidade)
                return rotacaoDireita(no);
    
            if (fator < -1 && jogo.popularidade > no.direita.jogo.popularidade)
                return rotacaoEsquerda(no);
    
            if (fator > 1 && jogo.popularidade > no.esquerda.jogo.popularidade) {
                no.esquerda = rotacaoEsquerda(no.esquerda);
                return rotacaoDireita(no);
            }
    
            if (fator < -1 && jogo.popularidade < no.direita.jogo.popularidade) {
                no.direita = rotacaoDireita(no.direita);
                return rotacaoEsquerda(no);
            }
    
            return no;
        }
    
        // Exibe os jogos em ordem decrescente de popularidade
        void exibirJogos(NoAVL no) {
            if (no != null) {
                exibirJogos(no.direita);
                System.out.println(no.jogo.nome + " - Popularidade: " + no.jogo.popularidade);
                exibirJogos(no.esquerda);
            }
        }
    }
    
    public class ClassificacaoJogos {
        public static void main(String[] args) {
            ArvoreAVL arvore = new ArvoreAVL();
    
            // Inser√ß√£o de jogos na √°rvore AVL
            arvore.raiz = arvore.inserir(arvore.raiz, new Jogo("The Witcher 3", 95));
            arvore.raiz = arvore.inserir(arvore.raiz, new Jogo("GTA V", 90));
            arvore.raiz = arvore.inserir(arvore.raiz, new Jogo("Minecraft", 80));
            arvore.raiz = arvore.inserir(arvore.raiz, new Jogo("FIFA 22", 85));
            arvore.raiz = arvore.inserir(arvore.raiz, new Jogo("Among Us", 70));
            arvore.raiz = arvore.inserir(arvore.raiz, new Jogo("Valorant", 75));
    
            // Exibi√ß√£o dos jogos em ordem decrescente de popularidade
            System.out.println("Classifica√ß√£o dos jogos:");
            arvore.exibirJogos(arvore.raiz);
        }
    }
    
` +
    '\n```\n' +
    `Neste exemplo, a classe Jogo representa um jogo de videogame, com o nome e a pontua√ß√£o de popularidade associada. A classe NoAVL representa um n√≥ da √°rvore AVL, que cont√©m um objeto Jogo, refer√™ncias para os n√≥s filhos (esquerda e direita), e a altura do n√≥ na √°rvore. A classe ArvoreAVL implementa as opera√ß√µes relacionadas √† √°rvore AVL, como inser√ß√£o e balanceamento.

    No exemplo, alguns jogos s√£o inseridos na √°rvore AVL com base em sua popularidade. Em seguida, a √°rvore √© percorrida em ordem decrescente de popularidade e os jogos s√£o exibidos na tela.`,
];

export { ARVORE_AVL_CONCEPT, ARVORE_AVL_EXAMPLE };
