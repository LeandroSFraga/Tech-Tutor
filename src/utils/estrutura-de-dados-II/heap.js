const HEAP_CONCEPT = [
  `üå≥ Um heap bin√°rio √© uma estrutura de dados que implementa o tipo abstrato de dados fila de prioridades. Geralmente, um heap √© implementado em um vetor, que ser√° a estrutura que utilizaremos.

Cada elemento no heap possui dois atributos principais. O primeiro √© a prioridade, representada pelo atributo "x.prioridade", que armazena o valor correspondente √† prioridade do elemento x. O segundo atributo √© o √≠ndice, representado por "x.indice", que guarda a posi√ß√£o em que o elemento x est√° armazenado no vetor. Esse √∫ltimo atributo √© importante para opera√ß√µes de altera√ß√£o de prioridades, uma vez que heaps n√£o fornecem a opera√ß√£o de busca eficiente.

Formalmente, dizemos que um vetor H √© um heap se ele satisfaz a propriedade de heap. Essa propriedade garante que cada elemento no heap tem uma prioridade maior ou igual aos seus elementos filhos. Dependendo do tipo de heap (min heap ou max heap), essa propriedade √© aplicada de forma diferente. No caso de um min heap, cada elemento deve ter uma prioridade menor ou igual aos seus filhos, enquanto em um max heap, cada elemento deve ter uma prioridade maior ou igual aos seus filhos. Essa propriedade de heap garante que o elemento com a maior (ou menor) prioridade esteja sempre na raiz do heap.

Os heaps s√£o √∫teis para implementar filas de prioridades, onde o elemento com a maior (ou menor) prioridade √© sempre o pr√≥ximo a ser acessado. Eles s√£o amplamente utilizados em algoritmos de ordena√ß√£o, como o heapsort, e em algoritmos que envolvem a sele√ß√£o dos elementos de maior (ou menor) prioridade. √â como ter uma fila especial em que os elementos mais importantes est√£o sempre √† frente! üåüüå≥`,
];
const HEAP_EXAMPLE = [
  ` Imagine um sistema de gerenciamento de tarefas, onde voc√™ deseja organizar as tarefas por ordem de prioridade. Um Heap (tamb√©m conhecido como fila de prioridade) pode ser utilizado para garantir que a tarefa de maior prioridade esteja sempre no topo da fila. Cada tarefa possui uma descri√ß√£o e uma prioridade associada.` +
    '\n```python\n' +
    `import heapq

  class Tarefa:
      def __init__(self, descricao, prioridade):
          self.descricao = descricao
          self.prioridade = prioridade
  
  # Cria√ß√£o de uma lista de tarefas
  tarefas = [
      Tarefa("Estudar para a prova", 3),
      Tarefa("Fazer compras", 2),
      Tarefa("Preparar apresenta√ß√£o", 1),
      Tarefa("Limpar a casa", 4),
      Tarefa("Enviar relat√≥rio", 2)
  ]
  
  # Cria√ß√£o de um Heap a partir da lista de tarefas
  heap = []
  for tarefa in tarefas:
      heapq.heappush(heap, (tarefa.prioridade, tarefa))
  
  # Remo√ß√£o das tarefas em ordem de prioridade
  while heap:
      prioridade, tarefa = heapq.heappop(heap)
      print(f"Descri√ß√£o: {tarefa.descricao} - Prioridade: {tarefa.prioridade}")
  ` +
    '\n```\n' +
    `Neste exemplo, a classe Tarefa representa uma tarefa com uma descri√ß√£o e uma prioridade. A lista tarefas cont√©m v√°rias tarefas a serem organizadas em um Heap. Usando a fun√ß√£o heappush do m√≥dulo heapq, as tarefas s√£o inseridas no Heap com base em suas prioridades. Em seguida, usando a fun√ß√£o heappop, as tarefas s√£o removidas do Heap em ordem de prioridade e exibidas na tela.

  O Heap permite que as tarefas sejam organizadas automaticamente de acordo com suas prioridades, garantindo que a tarefa de maior prioridade seja sempre a pr√≥xima a ser executada.`,
];

export { HEAP_CONCEPT, HEAP_EXAMPLE };
