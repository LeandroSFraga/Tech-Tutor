const ARVORE_B_CONCEPT = [
  `üå≥üî§ As √°rvores B s√£o estruturas de dados balanceadas projetadas para trabalhar eficientemente com grandes volumes de dados, especialmente em sistemas de armazenamento em disco. Elas s√£o utilizadas para garantir tempos de acesso eficientes e melhorar o desempenho em opera√ß√µes de busca, inser√ß√£o e remo√ß√£o.

As √°rvores B t√™m as seguintes caracter√≠sticas principais:

Ordem: Uma √°rvore B de ordem m possui as seguintes propriedades:

Cada n√≥, exceto a raiz, tem pelo menos m/2 chaves e, no m√°ximo, m chaves.
Cada n√≥, exceto a raiz, tem m+1 ponteiros para filhos.
Todas as folhas est√£o no mesmo n√≠vel.
Chaves ordenadas: As chaves dentro de cada n√≥ s√£o mantidas em ordem crescente. Isso permite uma busca eficiente usando algoritmos de busca bin√°ria.

Divis√£o e fus√£o: Quando um n√≥ atinge sua capacidade m√°xima de m chaves, ele √© dividido em dois n√≥s, e a chave do meio √© promovida para o n√≥ pai. Da mesma forma, quando um n√≥ tem menos que m/2 chaves, ele pode ser fundido com um irm√£o adjacente.

Caminho balanceado: Todas as folhas est√£o no mesmo n√≠vel, garantindo um caminho curto para acessar qualquer elemento da √°rvore. Isso ajuda a manter a efici√™ncia nas opera√ß√µes.

As √°rvores B s√£o especialmente √∫teis em casos em que os dados est√£o armazenados em disco, pois elas minimizam as opera√ß√µes de leitura e escrita necess√°rias para manipular os dados.`,
];
const ARVORE_B_EXAMPLE = [
  `Imagine um sistema de armazenamento de dados em disco, onde os dados s√£o organizados em uma √Årvore B. Cada n√≥ da √°rvore representa uma p√°gina de disco e cont√©m uma quantidade m√°xima de chaves. O objetivo √© garantir uma organiza√ß√£o eficiente dos dados e minimizar as opera√ß√µes de leitura e escrita no disco.` +
    '\n```python\n' +
    `class No:
  def __init__(self, folha=False):
      self.chaves = []
      self.filhos = []
      self.folha = folha

  def inserir(self, chave):
      self.chaves.append(chave)
      self.chaves.sort()


class ArvoreB:
  def __init__(self, t):
      self.raiz = No(True)
      self.t = t

  def inserir(self, chave):
      raiz = self.raiz
      if len(raiz.chaves) == (2 * self.t) - 1:
          temp = No()
          self.raiz = temp
          temp.filhos.insert(0, raiz)
          self._dividir_filho(temp, 0)
          self._inserir_nao_cheio(temp, chave)
      else:
          self._inserir_nao_cheio(raiz, chave)

  def _inserir_nao_cheio(self, no, chave):
      i = len(no.chaves) - 1
      if no.folha:
          no.chaves.append((None, None))
          while i >= 0 and chave < no.chaves[i]:
              no.chaves[i + 1] = no.chaves[i]
              i -= 1
          no.chaves[i + 1] = chave
      else:
          while i >= 0 and chave < no.chaves[i]:
              i -= 1
          i += 1
          if len(no.filhos[i].chaves) == (2 * self.t) - 1:
              self._dividir_filho(no, i)
              if chave > no.chaves[i]:
                  i += 1
          self._inserir_nao_cheio(no.filhos[i], chave)

  def _dividir_filho(self, no, i):
      t = self.t
      y = no.filhos[i]
      x = No(y.folha)
      no.filhos.insert(i + 1, x)
      no.chaves.insert(i, y.chaves[t - 1])
      x.chaves = y.chaves[t: (2 * t) - 1]
      y.chaves = y.chaves[0: t - 1]
      if not y.folha:
          x.filhos = y.filhos[t: 2 * t]
          y.filhos = y.filhos[0: t - 1]

  def percorrer(self, no=None):
      if no is None:
          no = self.raiz
      for i, chave in enumerate(no.chaves):
          if no.filhos:
              self.percorrer(no.filhos[i])
          if chave[0] is not None:
              print(chave[0])


# Exemplo de uso:
arvore_b = ArvoreB(t=2)
arvore_b.inserir((10, "Dado 1"))
arvore_b.inserir((20, "Dado 2"))
arvore_b.inserir((5, "Dado 3"))
arvore_b.inserir((15, "Dado 4"))

print("Percurso na √Årvore B:")
arvore_b.percorrer()
` +
    '\n```\n' +
    `Neste exemplo, a classe No representa um n√≥ da √°rvore B e a classe ArvoreB representa a pr√≥pria √°rvore. O par√¢metro t define o grau m√≠nimo da √°rvore (n√∫mero m√≠nimo de chaves em cada n√≥, exceto a raiz). A inser√ß√£o na √°rvore √© feita pelo m√©todo _inserir_nao_cheio, que √© recursivamente chamado at√© encontrar um n√≥ folha adequado para a inser√ß√£o. Se um n√≥ folha estiver cheio, ele √© dividido em dois n√≥s.

    No exemplo, alguns dados s√£o inseridos na √°rvore B e, em seguida, √© feito um percurso para exibir as chaves presentes nos n√≥s.`,
];

export { ARVORE_B_CONCEPT, ARVORE_B_EXAMPLE };
