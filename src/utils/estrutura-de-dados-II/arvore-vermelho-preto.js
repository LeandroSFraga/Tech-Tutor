const ARVORE_VERMELHO_PRETO_CONCEPT = [
  `üå≥‚ù§Ô∏è‚ö´ As √°rvores vermelho-preto s√£o uma estrutura de dados que implementa uma √°rvore bin√°ria de busca com propriedades adicionais para balanceamento. Elas s√£o chamadas assim devido √†s cores atribu√≠das aos n√≥s: vermelho ou preto.

As √°rvores vermelho-preto s√£o uma extens√£o das √°rvores bin√°rias de busca, com regras de balanceamento que garantem um desempenho eficiente em opera√ß√µes de busca, inser√ß√£o e remo√ß√£o. Elas s√£o amplamente utilizadas em estruturas de dados e algoritmos, pois mant√™m o balanceamento da √°rvore de forma autom√°tica.

As propriedades das √°rvores vermelho-preto s√£o:

- Cada n√≥ √© colorido como vermelho ou preto.
- A raiz da √°rvore √© sempre preta.
- Todos os caminhos da raiz at√© as folhas t√™m o mesmo n√∫mero de n√≥s pretos.
- Um n√≥ vermelho n√£o pode ter um filho vermelho.
- Todo caminho da raiz at√© uma folha ou n√≥ nulo deve ter o mesmo n√∫mero de n√≥s pretos.

Essas propriedades garantem que a altura da √°rvore seja balanceada e limitada a um valor proporcional ao logaritmo do n√∫mero de n√≥s. Isso garante um desempenho eficiente das opera√ß√µes.

Ao inserir ou remover um n√≥ em uma √°rvore vermelho-preto, √© necess√°rio aplicar algumas opera√ß√µes e regras especiais para manter as propriedades da √°rvore. Essas opera√ß√µes envolvem rota√ß√µes e reorganiza√ß√µes de cores dos n√≥s para garantir o balanceamento.`,
];
const ARVORE_VERMELHO_PRETO_EXAMPLE = [
  `Imagine um sistema de agenda, onde voc√™ deseja armazenar eventos em uma √°rvore Vermelho-Preto. Cada evento possui uma data e uma descri√ß√£o. O objetivo √© manter a √°rvore balanceada e permitir a busca eficiente dos eventos em ordem cronol√≥gica.` +
    '\n```java\n' +
    `class Evento {
    String data;
    String descricao;

    public Evento(String data, String descricao) {
        this.data = data;
        this.descricao = descricao;
    }
}

class NoRB {
    Evento evento;
    NoRB pai;
    NoRB esquerda;
    NoRB direita;
    boolean vermelho;

    public NoRB(Evento evento) {
        this.evento = evento;
        pai = null;
        esquerda = null;
        direita = null;
        vermelho = true;
    }
}

class ArvoreVP {
    NoRB raiz;
    NoRB sentinela;

    public ArvoreVP() {
        sentinela = new NoRB(null);
        sentinela.vermelho = false;
        raiz = sentinela;
    }

    // Inser√ß√£o de um novo evento na √°rvore Vermelho-Preto
    public void inserir(Evento evento) {
        NoRB novoNo = new NoRB(evento);
        novoNo.esquerda = sentinela;
        novoNo.direita = sentinela;

        NoRB pai = null;
        NoRB atual = raiz;

        while (atual != sentinela) {
            pai = atual;
            if (evento.data.compareTo(atual.evento.data) < 0) {
                atual = atual.esquerda;
            } else {
                atual = atual.direita;
            }
        }

        novoNo.pai = pai;

        if (pai == null) {
            raiz = novoNo;
        } else if (evento.data.compareTo(pai.evento.data) < 0) {
            pai.esquerda = novoNo;
        } else {
            pai.direita = novoNo;
        }

        novoNo.vermelho = true;
        balancearInsercao(novoNo);
    }

    // Realiza o balanceamento da √°rvore ap√≥s a inser√ß√£o
    private void balancearInsercao(NoRB no) {
        while (no.pai.vermelho) {
            if (no.pai == no.pai.pai.esquerda) {
                NoRB tio = no.pai.pai.direita;

                if (tio.vermelho) {
                    no.pai.vermelho = false;
                    tio.vermelho = false;
                    no.pai.pai.vermelho = true;
                    no = no.pai.pai;
                } else {
                    if (no == no.pai.direita) {
                        no = no.pai;
                        rotacaoEsquerda(no);
                    }

                    no.pai.vermelho = false;
                    no.pai.pai.vermelho = true;
                    rotacaoDireita(no.pai.pai);
                }
            } else {
                NoRB tio = no.pai.pai.esquerda;

                if (tio.vermelho) {
                    no.pai.vermelho = false;
                    tio.vermelho = false;
                    no.pai.pai.vermelho = true;
                    no = no.pai.pai;
                } else {
                    if (no == no.pai.esquerda) {
                        no = no.pai;
                        rotacaoDireita(no);
                    }

                    no.pai.vermelho = false;
                    no.pai.pai.vermelho = true;
                    rotacaoEsquerda(no.pai.pai);
                }
            }
        }

        raiz.vermelho = false;
    }

    // Realiza uma rota√ß√£o √† esquerda
    private void rotacaoEsquerda(NoRB no) {
        NoRB filhoDireita = no.direita;
        no.direita = filhoDireita.esquerda;

        if (filhoDireita.esquerda != sentinela) {
            filhoDireita.esquerda.pai = no;
        }

        filhoDireita.pai = no.pai;

        if (no.pai == null) {
            raiz = filhoDireita;
        } else if (no == no.pai.esquerda) {
            no.pai.esquerda = filhoDireita;
        } else {
` +
    '\n```\n' +
    `Neste exemplo, a classe Jogo representa um jogo de videogame, com o nome e a pontua√ß√£o de popularidade associada. A classe NoAVL representa um n√≥ da √°rvore AVL, que cont√©m um objeto Jogo, refer√™ncias para os n√≥s filhos (esquerda e direita), e a altura do n√≥ na √°rvore. A classe ArvoreAVL implementa as opera√ß√µes relacionadas √† √°rvore AVL, como inser√ß√£o e balanceamento.

    No exemplo, alguns jogos s√£o inseridos na √°rvore AVL com base em sua popularidade. Em seguida, a √°rvore √© percorrida em ordem decrescente de popularidade e os jogos s√£o exibidos na tela.`,
];

export { ARVORE_VERMELHO_PRETO_CONCEPT, ARVORE_VERMELHO_PRETO_EXAMPLE };
