const LISTAS_ENCADEADAS_CONCEPT = [
  `üîó As listas encadeadas s√£o estruturas de dados onde cada elemento guarda dados e um ponteiro para o pr√≥ximo elemento, criando um encadeamento que mant√©m a estrutura linear!

Nas listas encadeadas, cada elemento armazena um ou v√°rios dados, como se fosse uma caixinha com informa√ß√µes, e tamb√©m possui um ponteiro para o pr√≥ximo elemento da lista. √â como se cada elemento segurasse a m√£o do pr√≥ximo, formando uma corrente de dados. Essa conex√£o entre os elementos √© o que mant√©m a estrutura linear da lista! üì¶üîó

Nesse tipo de estrutura, podemos realizar diversas opera√ß√µes √∫teis. Podemos inserir elementos no in√≠cio da lista, adicionando uma nova caixinha no come√ßo da corrente. Tamb√©m podemos inserir elementos no fim da lista, adicionando um novo elemento ap√≥s o √∫ltimo da corrente. Podemos consultar toda a lista, percorrendo cada elemento sequencialmente para acessar seus dados. Al√©m disso, podemos remover um elemento espec√≠fico da lista, sem perder o encadeamento entre os elementos. E, se necess√°rio, podemos esvaziar completamente a lista, removendo todos os elementos. üîóüí°`,
];
const LISTAS_ENCADEADAS_EXAMPLE = [
  `üìö Vamos considerar um algoritmo para gerenciar uma lista de contatos utilizando uma lista din√¢mica. Podemos criar uma estrutura chamada 'Contato' com os atributos nome, telefone e email. Podemos ter uma lista din√¢mica chamada 'listaContatos' que ir√° armazenar os contatos. Podemos utilizar comandos de inser√ß√£o, remo√ß√£o e busca para manipular a lista de contatos. Dessa forma, teremos uma lista din√¢mica de contatos para gerenciar nossas conex√µes! üìûüìß` +
    '\n```\n' +
    `algoritmo ListaContatos
    registro Contato
        nome: caractere[50]
        telefone: caractere[15]
        email: caractere[50]
    fimregistro

    tipo NoContato
        contato: Contato
        proximo: ^NoContato
    fimtipo

    var
        primeiro: ^NoContato
        ultimo: ^NoContato

    procedimento inserirContato(contato: Contato)
        novoNo: ^NoContato

        novoNo <- novo(NoContato)
        novoNo^.contato <- contato
        novoNo^.proximo <- nulo

        se primeiro = nulo entao
            primeiro <- novoNo
            ultimo <- novoNo
        senao
            ultimo^.proximo <- novoNo
            ultimo <- novoNo
        fimse
    fimprocedimento

    procedimento removerContato(nome: caractere[50])
        atual: ^NoContato
        anterior: ^NoContato

        atual <- primeiro
        anterior <- nulo

        enquanto atual <> nulo e atual^.contato.nome <> nome faca
            anterior <- atual
            atual <- atual^.proximo
        fimenquanto

        se atual <> nulo entao
            se anterior = nulo entao
                primeiro <- atual^.proximo
            senao
                anterior^.proximo <- atual^.proximo
            fimse

            libere atual
        fimse
    fimprocedimento

    procedimento buscarContato(nome: caractere[50])
        atual: ^NoContato

        atual <- primeiro

        enquanto atual <> nulo e atual^.contato.nome <> nome faca
            atual <- atual^.proximo
        fimenquanto

        se atual <> nulo entao
            escreva("Nome:", atual^.contato.nome)
            escreva("Telefone:", atual^.contato.telefone)
            escreva("Email:", atual^.contato.email)
        senao
            escreva("Contato n√£o encontrado!")
        fimse
    fimprocedimento

    procedimento exibirListaContatos()
        atual: ^NoContato

        atual <- primeiro

        enquanto atual <> nulo faca
            escreva("Nome:", atual^.contato.nome)
            escreva("Telefone:", atual^.contato.telefone)
            escreva("Email:", atual^.contato.email)
            atual <- atual^.proximo
        fimenquanto
    fimprocedimento

    // Utilizando a lista din√¢mica de contatos
    escreva("Digite o nome do contato (0 para sair): ")
    leia(nome)
    enquanto nome <> "0" faca
        escreva("Digite o telefone do contato: ")
        leia(telefone)
        escreva("Digite o email do contato: ")
        leia(email)

        contato: Contato
        contato.nome <- nome
        contato.telefone <- telefone
        contato.email <- email

        inserirContato(contato)

        escreva("Digite o pr√≥ximo nome do contato (0 para sair): ")
        leia(nome)
    fimenquanto

    exibirListaContatos()

    // Removendo um contato
    escreva("Digite o nome do contato a ser removido: ")
    leia(nome)
    removerContato(nome)

    exibirListaContatos()

    // Buscando um contato
    escreva("Digite o nome do contato a ser buscado: ")
    leia(nome)
    buscarContato(nome)
fimalgoritmo
` +
    '\n```\n',
  `üìö Vamos considerar um algoritmo para gerenciar uma lista de tarefas utilizando uma lista din√¢mica. Podemos criar uma classe chamada 'Tarefa' com os atributos descri√ß√£o e conclu√≠da. Podemos ter uma lista din√¢mica chamada 'listaTarefas' que ir√° armazenar as tarefas. Podemos utilizar m√©todos de inser√ß√£o, remo√ß√£o e busca para manipular a lista de tarefas. Dessa forma, teremos uma lista din√¢mica de tarefas para gerenciar nossas atividades di√°rias! üìù‚úÖ` +
    '\n```python\n' +
    `class Tarefa:
    def __init__(self, descricao, concluida=False):
        self.descricao = descricao
        self.concluida = concluida

class ListaTarefas:
    def __init__(self):
        self.tarefas = []

    def adicionar_tarefa(self, descricao):
        tarefa = Tarefa(descricao)
        self.tarefas.append(tarefa)

    def remover_tarefa(self, descricao):
        for tarefa in self.tarefas:
            if tarefa.descricao == descricao:
                self.tarefas.remove(tarefa)
                break

    def buscar_tarefa(self, descricao):
        for tarefa in self.tarefas:
            if tarefa.descricao == descricao:
                return tarefa

        return None

    def exibir_lista_tarefas(self):
        for tarefa in self.tarefas:
            status = "Conclu√≠da" if tarefa.concluida else "Pendente"
            print(f"Descri√ß√£o: {tarefa.descricao} - Status: {status}")

# Utilizando a lista din√¢mica de tarefas
lista_tarefas = ListaTarefas()

# Adicionando tarefas
lista_tarefas.adicionar_tarefa("Fazer compras")
lista_tarefas.adicionar_tarefa("Estudar para a prova")

# Exibindo a lista de tarefas
lista_tarefas.exibir_lista_tarefas()

# Removendo uma tarefa
lista_tarefas.remover_tarefa("Fazer compras")

# Exibindo a lista de tarefas atualizada
lista_tarefas.exibir_lista_tarefas()

# Buscando uma tarefa
tarefa = lista_tarefas.buscar_tarefa("Estudar para a prova")
if tarefa:
    print("Tarefa encontrada!")
    print(f"Descri√ß√£o: {tarefa.descricao}")
    print(f"Status: {'Conclu√≠da' if tarefa.concluida else 'Pendente'}")
else:
    print("Tarefa n√£o encontrada!")
` +
    '\n```\n',
  `üìö Vamos considerar um algoritmo para simular um jogo de RPG, onde teremos uma lista din√¢mica de personagens. Cada personagem ser√° uma inst√¢ncia da classe 'Personagem' e ter√° atributos como nome, n√≠vel, vida, entre outros. A lista din√¢mica 'listaPersonagens' ir√° armazenar todos os personagens do jogo. Podemos utilizar m√©todos de cria√ß√£o de personagem, evolu√ß√£o de n√≠vel, batalha, entre outros, para interagir com a lista de personagens. Dessa forma, teremos uma lista din√¢mica de personagens para criar um mundo cheio de aventuras! üéÆüßô‚Äç‚ôÇÔ∏è"

  üìöEsse exemplo mais complexo envolveria a cria√ß√£o de v√°rias classes e m√©todos espec√≠ficos para simular um jogo de RPG completo. No entanto, devido √† sua complexidade, n√£o √© poss√≠vel apresentar todo o c√≥digo aqui. Ent√£o vou deixar esse desafio contigo! Tente recriar um universo de RPG utilizando uma lista encadeada para salvar todos os personagens do jogo. Crie m√©todos espec√≠ficos para os personagens e tente trazer conte√∫dos de POO, como classe abstrata e interfaces por exemplo. 
  
  √â uma √≥tima forma de sintetizar todo o conte√∫do visto at√© agora e p√∫blicar seu c√≥digo no github!`,
];

export { LISTAS_ENCADEADAS_CONCEPT, LISTAS_ENCADEADAS_EXAMPLE };
