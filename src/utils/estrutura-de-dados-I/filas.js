const FILAS_CONCEPT = [
  `üö∂‚Äç‚ôÇÔ∏è As filas s√£o cole√ß√µes din√¢micas de dados onde a remo√ß√£o ocorre no elemento que est√° na cole√ß√£o h√° mais tempo. Essa pol√≠tica de remo√ß√£o √© conhecida como "FIFO", que √© um acr√¥nimo para "first in, first out" (primeiro a entrar, primeiro a sair)!

Imagine uma fila de pessoas esperando em um banco. A primeira pessoa que entrou na fila ser√° a primeira a ser atendida. Essa √© exatamente a ideia por tr√°s das filas! üö∂‚Äç‚ôÄÔ∏èüîÑ

Em uma fila, os elementos s√£o adicionados no final e removidos do in√≠cio. Quando um novo elemento entra na fila, ele se posiciona no final, atr√°s dos elementos anteriores. Quando um elemento √© removido, √© retirado do in√≠cio da fila, ou seja, o elemento que est√° h√° mais tempo na fila √© o primeiro a ser atendido ou removido. üö∂‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏è

As filas s√£o amplamente utilizadas em programa√ß√£o, pois fornecem uma forma eficiente de gerenciar elementos em uma ordem espec√≠fica. Podemos adicionar elementos rapidamente no final e remov√™-los facilmente no in√≠cio. S√£o perfeitas para situa√ß√µes em que precisamos lidar com processos em ordem de chegada, como agendamentos, requisi√ß√µes de rede e muito mais. üåüüö∂‚Äç‚ôÇÔ∏è`,
];
const FILAS_EXAMPLE = [
  `Vamos imaginar uma situa√ß√£o em um supermercado, onde as pessoas formam uma fila para o caixa. O algoritmo abaixo, em Portugol, simula a entrada e sa√≠da de pessoas nessa fila:` +
    '\n```\n' +
    `algoritmo FilaSupermercado
    var
        fila: fila de texto
        pessoa: texto
    inicio
        enquanto pessoa <> "sair" fa√ßa
            escreva("Digite o nome da pessoa (ou 'sair' para encerrar): ")
            leia(pessoa)
            se pessoa <> "sair" ent√£o
                enfileire(fila, pessoa)  // Adiciona a pessoa na fila
            fim se
        fim enquanto
        
        escreva("Atendimento:")
        enquanto n√£o vazia(fila) fa√ßa
            pessoa := desenfileire(fila)  // Remove e obt√©m a pessoa da fila
            escreva(pessoa)
        fim enquanto
    fim
fim algoritmo
` +
    '\n```\n' +
    `Nesse exemplo, o algoritmo simula uma fila de pessoas em um supermercado. Ele utiliza uma fila para armazenar os nomes das pessoas que voc√™ digita. Enquanto voc√™ n√£o digitar "sair", o algoritmo enfileira as pessoas na fila. Em seguida, ele desenfileira e exibe as pessoas na ordem em que elas entraram na fila, simulando o atendimento no caixa.`,
  `Processamento de tarefas:
  Imagine um sistema que recebe v√°rias tarefas para processamento, mas elas precisam ser executadas em ordem de chegada. Um algoritmo com fila pode ser usado para controlar o processamento dessas tarefas. Aqui est√° um exemplo em Java:` +
    '\n```java\n' +
    `import java.util.LinkedList;
    import java.util.Queue;
    
    class Tarefa {
        private String descricao;
    
        public Tarefa(String descricao) {
            this.descricao = descricao;
        }
    
        public void executar() {
            System.out.println("Executando tarefa: " + descricao);
            // L√≥gica de processamento da tarefa
        }
    }
    
    public class ProcessamentoTarefas {
        public static void main(String[] args) {
            Queue<Tarefa> fila = new LinkedList<>();
    
            // Adiciona algumas tarefas na fila
            fila.add(new Tarefa("Tarefa 1"));
            fila.add(new Tarefa("Tarefa 2"));
            fila.add(new Tarefa("Tarefa 3"));
    
            // Processa as tarefas na ordem de chegada
            while (!fila.isEmpty()) {
                Tarefa tarefa = fila.poll();  // Remove e obt√©m a pr√≥xima tarefa da fila
                tarefa.executar();
            }
        }
    }
    ` +
    '\n```\n' +
    `Nesse exemplo, o algoritmo utiliza uma fila para controlar o processamento de tarefas. Cada tarefa √© representada pela classe Tarefa, que possui uma descri√ß√£o e um m√©todo executar() para realizar o processamento. As tarefas s√£o adicionadas √† fila e, em seguida, s√£o processadas na ordem de chegada usando o m√©todo poll() para remover e obter a pr√≥xima tarefa da fila.`,
  `Simula√ß√£o de fila de atendimento:
  Imagine um sistema de atendimento ao cliente, onde as pessoas aguardam em uma fila para serem chamadas por um atendente. Um algoritmo com fila pode ser usado para simular essa situa√ß√£o. Aqui est√° um exemplo em C#` +
    '\n```csharp\n' +
    `using System;
    using System.Collections.Generic;
    
    class AtendimentoCliente
    {
        static void Main(string[] args)
        {
            Queue<string> fila = new Queue<string>();
    
            Console.WriteLine("Bem-vindo ao sistema de atendimento ao cliente!");
    
            while (true)
            {
                Console.Write("Digite o nome do cliente (ou 'sair' para encerrar): ");
                string cliente = Console.ReadLine();
    
                if (cliente == "sair")
                    break;
    
                fila.Enqueue(cliente);  // Adiciona o cliente na fila
    
                Console.WriteLine("Cliente {0} foi adicionado √† fila.", cliente);
            }
    
            Console.WriteLine("\nAtendimento iniciado:");
    
            while (fila.Count > 0)
            {
                string cliente = fila.Dequeue();  // Remove e obt√©m o pr√≥ximo cliente da fila
    
                Console.WriteLine("Atendendo cliente {0}.", cliente);
            }
    
            Console.WriteLine("Atendimento encerrado. Obrigado!");
        }
    }
    ` +
    '\n```\n' +
    `Nesse exemplo, o algoritmo simula um sistema de atendimento ao cliente. Os nomes dos clientes s√£o adicionados √† fila usando o m√©todo Enqueue(). Em seguida, os clientes s√£o atendidos na ordem de chegada usando o m√©todo Dequeue() para remover e obter o pr√≥ximo cliente da fila.`,
];

export { FILAS_CONCEPT, FILAS_EXAMPLE };
