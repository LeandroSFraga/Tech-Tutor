const PILHAS_CONCEPT = [
  `üìö As pilhas s√£o cole√ß√µes din√¢micas de dados onde a remo√ß√£o ocorre no elemento que est√° na cole√ß√£o h√° menos tempo. Essa pol√≠tica de remo√ß√£o √© conhecida como "LIFO", que √© um acr√¥nimo para "last in, first out" (√∫ltimo a entrar, primeiro a sair)!

Imagine uma pilha de livros, onde voc√™ coloca um livro em cima do outro. O livro que voc√™ colocou por √∫ltimo ser√° o primeiro a ser removido quando voc√™ quiser pegar um livro. Essa √© exatamente a ideia por tr√°s das pilhas! üìöüîÑ

Em uma pilha, os elementos s√£o adicionados no topo e removidos do topo. Quando um novo elemento √© adicionado, ele se torna o topo da pilha, empurrando os elementos anteriores para baixo. Quando um elemento √© removido, o elemento que estava logo abaixo dele se torna o novo topo e pode ser acessado. üìöüîù

Essa estrat√©gia de "LIFO" √© √∫til em muitas situa√ß√µes. Por exemplo, em um navegador da web, quando navegamos em diferentes p√°ginas, elas s√£o colocadas em uma pilha. Quando pressionamos o bot√£o "Voltar", a p√°gina mais recente √© removida, e a p√°gina anterior √© exibida. Isso nos permite seguir a ordem de navega√ß√£o correta. üîùüåê`,
];
const PILHAS_EXAMPLE = [
  `Imagine que voc√™ est√° empilhando pratos na sua cozinha, e voc√™ quer garantir que n√£o fique desorganizado. O algoritmo abaixo, em Portugol, mostra como voc√™ pode empilhar e desempilhar os pratos de maneira adequada:` +
    '\n```\n' +
    `algoritmo OrganizarPratos
    var
        pilha: pilha de texto
        prato: texto
    inicio
        enquanto prato <> "sair" fa√ßa
            escreva("Digite o nome do prato (ou 'sair' para encerrar): ")
            leia(prato)
            se prato <> "sair" ent√£o
                empilhe(pilha, prato)
            fim se
        fim enquanto
        
        escreva("Empilhando os pratos:")
        enquanto n√£o vazia(pilha) fa√ßa
            prato := desempilhe(pilha)
            escreva(prato)
        fim enquanto
    fim
fim algoritmo
` +
    '\n```\n' +
    `Nesse exemplo, o algoritmo simula o ato de empilhar pratos na cozinha. Ele utiliza uma pilha para armazenar os nomes dos pratos que voc√™ digita. Enquanto voc√™ n√£o digitar "sair", o algoritmo empilha os pratos. Em seguida, ele desempilha e exibe os pratos na ordem correta, garantindo que o √∫ltimo prato empilhado seja o primeiro a ser retirado.`,
  `Verifica√ß√£o de pal√≠ndromos:
  Um pal√≠ndromo √© uma palavra ou frase que pode ser lida tanto da esquerda para a direita quanto da direita para a esquerda. Nesse exemplo em Python, utilizamos uma pilha para verificar se uma palavra ou frase √© um pal√≠ndromo:` +
    '\n```python\n' +
    `def verificar_palindromo(texto):
    pilha = []
    texto = texto.lower().replace(" ", "")  # Converter para min√∫sculas e remover espa√ßos
    
    for letra in texto:
        pilha.append(letra)  # Empilha as letras da palavra/frase
    
    inverso = ""
    while len(pilha) > 0:
        inverso += pilha.pop()  # Desempilha as letras para formar o inverso
    
    return texto == inverso

palavra = input("Digite uma palavra ou frase: ")
if verificar_palindromo(palavra):
    print("√â um pal√≠ndromo!")
else:
    print("N√£o √© um pal√≠ndromo!")
` +
    '\n```\n' +
    `Nesse exemplo, o algoritmo utiliza uma pilha para verificar se uma palavra ou frase digitada pelo usu√°rio √© um pal√≠ndromo. As letras da palavra/frase s√£o empilhadas, e em seguida s√£o desempilhadas para formar a vers√£o inversa. Se a vers√£o inversa for igual ao texto original, ent√£o √© um pal√≠ndromo.`,
  `Navega√ß√£o em labirinto:
  Imagine que voc√™ est√° em um labirinto e precisa encontrar o caminho de sa√≠da. Um algoritmo com pilha pode ser usado para resolver esse problema. Aqui est√° um exemplo em C++:` +
    '\n```cpp\n' +
    `#include <iostream>
    #include <stack>
    using namespace std;
    
    const int N = 5;  // Tamanho do labirinto
    
    bool resolverLabirinto(int labirinto[N][N]) {
        stack<pair<int, int>> pilha;  // Pilha de coordenadas (linha, coluna)
        int linhaAtual = 0, colunaAtual = 0;
        
        while (true) {
            if (linhaAtual == N - 1 && colunaAtual == N - 1) {
                return true;  // Chegou na sa√≠da
            }
            
            if (linhaAtual + 1 < N && labirinto[linhaAtual + 1][colunaAtual] == 1) {
                pilha.push(make_pair(linhaAtual, colunaAtual));  // Empilha a posi√ß√£o atual
                labirinto[linhaAtual][colunaAtual] = 0;  // Marca como visitado
                linhaAtual++;
            }
            else if (colunaAtual + 1 < N && labirinto[linhaAtual][colunaAtual + 1] == 1) {
                pilha.push(make_pair(linhaAtual, colunaAtual));
                labirinto[linhaAtual][colunaAtual] = 0;
                colunaAtual++;
            }
            else if (!pilha.empty()) {
                pair<int, int> posicaoAnterior = pilha.top();  // Obt√©m a posi√ß√£o anterior da pilha
                pilha.pop();
                linhaAtual = posicaoAnterior.first;
                colunaAtual = posicaoAnterior.second;
            }
            else {
                return false;  // N√£o h√° caminho para a sa√≠da
            }
        }
    }
    
    int main() {
        int labirinto[N][N] = {
            {1, 0, 1, 1, 1},
            {1, 1, 1, 0, 0},
            {0, 0, 1, 1, 1},
            {0, 0, 0, 0, 1},
            {0, 0, 0, 0, 1}
        };
        
        if (resolverLabirinto(labirinto)) {
            cout << "Voc√™ encontrou o caminho para a sa√≠da!" << endl;
        }
        else {
            cout << "N√£o h√° caminho para a sa√≠da..." << endl;
        }
        
        return 0;
    }
    ` +
    '\n```\n' +
    `Nesse exemplo, o algoritmo utiliza uma pilha para navegar por um labirinto representado por uma matriz. Ele tenta avan√ßar para a direita ou para baixo sempre que poss√≠vel, empilhando as posi√ß√µes visitadas. Se n√£o for poss√≠vel avan√ßar, ele desempilha a posi√ß√£o anterior para retroceder e tentar outro caminho. O objetivo √© encontrar um caminho at√© a posi√ß√£o de sa√≠da (√∫ltima c√©lula da matriz).`,
];

export { PILHAS_CONCEPT, PILHAS_EXAMPLE };
