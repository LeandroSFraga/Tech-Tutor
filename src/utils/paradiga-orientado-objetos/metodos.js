const METODOS_CONCEPT = [
  `üîß Os m√©todos s√£o como ajudantes especiais na programa√ß√£o, que executam tarefas espec√≠ficas e agrupam c√≥digo relacionado!

Os m√©todos s√£o blocos de c√≥digo que podem ser declarados dentro de classes. Eles nos permitem organizar o c√≥digo de forma mais eficiente e promover a reutiliza√ß√£o. üéÅ‚ú®

Quando uma classe √© instanciada, um novo objeto √© criado. Esse objeto pode ent√£o chamar os m√©todos da classe.  üë•üî®

Os m√©todos podem receber par√¢metros, que s√£o valores passados para o m√©todo quando ele √© chamado. Esses par√¢metros s√£o como informa√ß√µes que o m√©todo precisa para executar sua tarefa. üìùüîÑ

Al√©m disso, os m√©todos tamb√©m podem retornar valores, que s√£o os resultados ou informa√ß√µes que o m√©todo entrega de volta quando √© executado. üì¶üéÅ`,
];
const METODOS_EXAMPLE = [
  `üí° Vamos pensar em um algoritmo para calcular o desconto de um produto. Podemos criar um m√©todo chamado 'calcularDesconto' que recebe o valor original do produto e a porcentagem de desconto como par√¢metros. Dentro desse m√©todo, realizamos o c√°lculo do desconto e retornamos o valor com desconto. Dessa forma, podemos reutilizar esse m√©todo em diferentes partes do nosso algoritmo sempre que precisarmos calcular o desconto de um produto. ‚úÇÔ∏èüí∞`,
  `üè¶ Vamos criar um programa em Java para simular opera√ß√µes banc√°rias, como o dep√≥sito em uma conta. Podemos criar um m√©todo chamado 'realizarDeposito' na classe 'ContaBancaria' que recebe o valor do dep√≥sito como par√¢metro. Dentro desse m√©todo, atualizamos o saldo da conta adicionando o valor do dep√≥sito. Assim, sempre que quisermos fazer um dep√≥sito, podemos chamar esse m√©todo e o saldo ser√° atualizado automaticamente. üí∞üèß` +
    '\n```java\n' +
    `class ContaBancaria {
      private double saldo;
  
      public void realizarDeposito(double valorDeposito) {
          saldo += valorDeposito;
      }
  }
  
  public class ProgramaBancario {
      public static void main(String[] args) {
          ContaBancaria conta = new ContaBancaria();
          conta.realizarDeposito(100.0);
          System.out.println("Saldo atual: " + conta.getSaldo());
      }
  }
  ` +
    '\n```\n',
  `üçî Vamos criar um programa em Python para fazer o c√°lculo do pre√ßo final de um lanche em uma lanchonete. Podemos criar uma fun√ß√£o chamada 'calcularPrecoFinal' que recebe o pre√ßo base do lanche e a quantidade de modificadoress como par√¢metros. Dentro da fun√ß√£o, adicionamos um valor fixo por cada modificadores e retornamos o pre√ßo final. Dessa forma, podemos facilmente calcular o pre√ßo de um lanche com diferentes modificadoress. üçîüçÖ` +
    '\n```python\n' +
    `def calcularPrecoFinal(precoBase, quantidadeModificadores):
    valorPorModificadore = 2.0
    precoFinal = precoBase + (valorPorModificadore * quantidadeModificadores)
    return precoFinal

# Chamando a fun√ß√£o calcularPrecoFinal e utilizando o valor retornado
precoFinal = calcularPrecoFinal(10.0, 3)
print("Pre√ßo final: R$", precoFinal)
` +
    '\n```\n',
];

export { METODOS_CONCEPT, METODOS_EXAMPLE };
