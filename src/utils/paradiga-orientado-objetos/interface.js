const INTERFACE_CONCEPT = [
  `üîå As interfaces s√£o como contratos m√°gicos na programa√ß√£o, que definem um conjunto de m√©todos que as classes devem implementar!

Uma interface √© uma estrutura especial que estabelece um conjunto de m√©todos, mas esses m√©todos n√£o t√™m um corpo definido. Eles s√£o como promessas que as classes que implementam a interface concordam em cumprir, fornecendo uma implementa√ß√£o espec√≠fica para cada um dos m√©todos. √â um roteiro para seguir! üìù‚ú®

As interfaces s√£o incr√≠veis porque fornecem contratos para as classes. Isso significa que, quando uma classe implementa uma interface, ela concorda em oferecer exatamente os m√©todos especificados na interface. Tipo um acordo entre a classe e a interface, onde a classe promete ter certos comportamentos. Isso torna o c√≥digo mais organizado e previs√≠vel! ü§ùüìö`,
];
const INTERFACE_EXAMPLE = [
  `üì± Vamos pensar em um algoritmo para representar dispositivos eletr√¥nicos, como smartphones, tablets e laptops. Podemos criar uma interface chamada 'Conectividade' que define m√©todos como 'conectar', 'desconectar' e 'transferirDados'. Todas as classes que representam dispositivos eletr√¥nicos podem implementar essa interface, garantindo que todos eles tenham os mesmos m√©todos relacionados √† conectividade. Dessa forma, independentemente do tipo de dispositivo, podemos usar esses m√©todos de maneira consistente. Por exemplo, um smartphone pode implementar a interface 'Conectividade' para se conectar a uma rede Wi-Fi, enquanto um laptop pode implement√°-la para se conectar a uma impressora. A interface nos ajuda a padronizar e organizar a funcionalidade de conectividade em diferentes dispositivos! üì∂üíªüñ®Ô∏è`,
  `üéÆ Vamos criar um programa em Java para representar jogos. Podemos criar uma interface chamada 'Jogabilidade' que define m√©todos como 'jogar', 'pausar' e 'salvarJogo'. Todas as classes que representam jogos podem implementar essa interface, garantindo que todas tenham a mesma funcionalidade b√°sica relacionada √† jogabilidade. Por exemplo, uma classe 'JogoAventura' pode implementar a interface 'Jogabilidade' para permitir que o jogador jogue, pause o jogo e salve o progresso. J√° uma classe 'JogoEsporte' pode implement√°-la para permitir que o jogador jogue, pause o jogo e salve as estat√≠sticas. üéÆüïπÔ∏èüíæ` +
    '\n```java\n' +
    `interface Jogabilidade {
      void jogar();
      void pausar();
      void salvarJogo();
  }
  
  class JogoAventura implements Jogabilidade {
      // Implementa√ß√£o dos m√©todos da interface para o Jogo de Aventura
  }
  
  class JogoEsporte implements Jogabilidade {
      // Implementa√ß√£o dos m√©todos da interface para o Jogo de Esporte
  }
  ` +
    '\n```\n',
  `üåç Vamos criar um programa em C# para representar servi√ßos de geolocaliza√ß√£o. Podemos criar uma interface chamada 'Geolocalizacao' que define m√©todos como 'obterLocalizacao', 'calcularDistancia' e 'encontrarRota'. Todas as classes que representam servi√ßos de geolocaliza√ß√£o podem implementar essa interface, garantindo que todas tenham os mesmos m√©todos relacionados √† geolocaliza√ß√£o. Por exemplo, uma classe 'GPS' pode implementar a interface 'Geolocalizacao' para obter a localiza√ß√£o atual, calcular dist√¢ncias entre pontos e encontrar rotas. J√° uma classe 'ServicoMapas' pode implement√°-la para obter localiza√ß√µes, calcular dist√¢ncias e encontrar rotas baseado em um banco de dados de mapas. A interface nos permite definir um conjunto de funcionalidades comuns para servi√ßos de geolocaliza√ß√£o! üåçüìçüó∫Ô∏è` +
    '\n```csharp\n' +
    `interface Geolocalizacao {
    void obterLocalizacao();
    void calcularDistancia();
    void encontrarRota();
}

class GPS : Geolocalizacao {
    // Implementa√ß√£o dos m√©todos da interface para o GPS
}

class ServicoMapas : Geolocalizacao {
    // Implementa√ß√£o dos m√©todos da interface para o Servi√ßo de Mapas
}
` +
    '\n```\n',
];

export { INTERFACE_CONCEPT, INTERFACE_EXAMPLE };
