const ENCAPSULAMENTO_CONCEPT = [
  `üòäüîí O encapsulamento √© como uma camada protetora que mant√©m nossos dados seguros e escondidos de olhares indiscretos! üõ°Ô∏èüîê

Em programa√ß√£o orientada a objetos, o encapsulamento nos permite ocultar os detalhes internos de um objeto e proteger seus dados. Isso significa que os dados de um objeto s√£o protegidos de acesso externo e s√≥ podem ser acessados por meio dos m√©todos do pr√≥prio objeto.

O encapsulamento traz v√°rias vantagens incr√≠veis! Veja s√≥: ‚ú®üîí

Aumentar a seguran√ßa do c√≥digo: Ao encapsular os dados, impedimos que sejam acessados ou alterados por c√≥digo indesejado. Isso protege nossas informa√ß√µes sens√≠veis e evita comportamentos inesperados.

Facilitar a manuten√ß√£o do c√≥digo: Com o encapsulamento, os dados s√£o ocultados do c√≥digo externo. Isso significa que, se precisarmos fazer altera√ß√µes nos dados, podemos faz√™-lo apenas por meio dos m√©todos do objeto. Isso torna as modifica√ß√µes mais f√°ceis, sem afetar outros trechos do c√≥digo.

Facilitar a reutiliza√ß√£o do c√≥digo: Quando encapsulamos um objeto, podemos us√°-lo em diferentes partes do nosso c√≥digo sem precisar repetir a mesma implementa√ß√£o. Isso torna nosso c√≥digo mais eficiente, evitando a duplica√ß√£o de c√≥digo e promovendo a reutiliza√ß√£o.

Tornar o c√≥digo mais f√°cil de entender: Ao encapsular os dados, podemos focar na l√≥gica do c√≥digo em vez de nos detalhes de implementa√ß√£o dos dados. Isso torna o c√≥digo mais leg√≠vel e compreens√≠vel, facilitando o trabalho em equipe e a manuten√ß√£o futura.`,
];
const ENCAPSULAMENTO_EXAMPLE = [
  `üå± Vamos criar um algoritmo para representar uma planta. Podemos criar uma classe chamada 'Planta' que possui atributos como 'nome cient√≠fico', 'altura' e 'esp√©cie'. Para proteger esses atributos e garantir que sejam acessados e modificados adequadamente, podemos encapsul√°-los e fornecer m√©todos de acesso e altera√ß√£o, como 'getNomeCientifico()' e 'setAltura()'. Dessa forma, os dados da planta ficam encapsulados e s√≥ podem ser manipulados pelos m√©todos apropriados. Isso ajuda a preservar a integridade dos dados e facilita o controle sobre as informa√ß√µes da planta! üåøüå∫` +
    '\n```\n' +
    `classe Planta
    privado caractere nome_cientifico
    privado real altura
    privado caractere especie
    
    // M√©todos de acesso (getters)
    funcao caractere getNomeCientifico()
       retorne nome_cientifico
    fimfuncao
    
    funcao real getAltura()
       retorne altura
    fimfuncao
    
    // M√©todos de altera√ß√£o (setters)
    procedimento setAltura(nova_altura)
       altura <- nova_altura
    fimprocedimento
 fimclasse
 
 // Cria√ß√£o de objeto
 Planta minhaPlanta = novo Planta()
 
 // Utilizando m√©todos de acesso e altera√ß√£o
 minhaPlanta.setAltura(0.5)
 escreva("Nome cient√≠fico: ", minhaPlanta.getNomeCientifico())
 ` +
    '\n```\n',

  `üí≥ Vamos pensar em um algoritmo para representar uma conta banc√°ria. Podemos criar uma classe chamada 'ContaBancaria' que possui atributos como 'saldo', 'titular' e 'n√∫mero da conta'. Para proteger os dados da conta e garantir que sejam acessados e modificados de forma adequada, podemos encapsular esses atributos e fornecer m√©todos de acesso e altera√ß√£o, como 'getSaldo()' e 'setTitular()'. Dessa forma, os dados da conta ficam protegidos e s√≥ podem ser manipulados atrav√©s dos m√©todos apropriados. Isso garante a integridade dos dados e a seguran√ßa da conta banc√°ria! üí∞üè¶` +
    '\n```\n' +
    `classe ContaBancaria
    privado real saldo
    privado caractere titular
    privado caractere numero_conta
    
    // M√©todos de acesso (getters)
    funcao real getSaldo()
       retorne saldo
    fimfuncao
    
    funcao caractere getTitular()
       retorne titular
    fimfuncao
    
    // M√©todos de altera√ß√£o (setters)
    procedimento setTitular(novo_titular)
       titular <- novo_titular
    fimprocedimento
 fimclasse
 
 // Cria√ß√£o de objeto
 ContaBancaria minhaConta = novo ContaBancaria()
 
 // Utilizando m√©todos de acesso e altera√ß√£o
 minhaConta.setTitular("Jo√£o da Silva")
 escreva("Saldo atual: ", minhaConta.getSaldo())
 ` +
    '\n```\n',
  `üìö Vamos criar um programa em Java para representar livros. Podemos criar uma classe chamada 'Livro' que possui atributos como 't√≠tulo', 'autor' e 'ano de publica√ß√£o'. Para proteger esses atributos e controlar seu acesso, podemos encapsul√°-los e fornecer m√©todos de acesso e altera√ß√£o, como 'getTitulo()' e 'setAnoPublicacao()'. Dessa forma, os dados do livro ficam encapsulados e s√≥ podem ser manipulados atrav√©s dos m√©todos apropriados. Isso ajuda a garantir a consist√™ncia dos dados e facilita a manuten√ß√£o do c√≥digo! üìñüìù` +
    '\n```\n' +
    `class Livro {
    private String titulo;
    private String autor;
    private int anoPublicacao;
    
    // M√©todos de acesso (getters)
    public String getTitulo() {
        return titulo;
    }
    
    public String getAutor() {
        return autor;
    }
    
    // M√©todos de altera√ß√£o (setters)
    public void setAnoPublicacao(int novoAnoPublicacao) {
        anoPublicacao = novoAnoPublicacao;
    }
}

// Cria√ß√£o de objeto
Livro meuLivro = new Livro();

// Utilizando m√©todos de acesso e altera√ß√£o
meuLivro.setAnoPublicacao(2005);
System.out.println("
` +
    '\n```\n',
];

export { ENCAPSULAMENTO_CONCEPT, ENCAPSULAMENTO_EXAMPLE };
